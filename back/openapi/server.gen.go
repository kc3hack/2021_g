// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// box一覧取得
	// (GET /boxes)
	GetBoxes(ctx echo.Context) error
	// box作成
	// (POST /boxes)
	PostBoxes(ctx echo.Context) error
	// 特定のbox削除
	// (DELETE /boxes/{box_id})
	DeleteBoxesBoxId(ctx echo.Context, boxId Id) error
	// 特定のbox編集
	// (PUT /boxes/{box_id})
	PutBoxesBoxId(ctx echo.Context, boxId Id) error
	// 特定のboxのitem一覧取得
	// (GET /boxes/{box_id}/items)
	GetBoxesBoxIdItems(ctx echo.Context, boxId Id) error
	// 特定のboxにitem追加
	// (POST /boxes/{box_id}/items)
	PostBoxesBoxIdItems(ctx echo.Context, boxId Id) error
	// 特定のboxのQR取得
	// (GET /boxes/{box_id}/qr)
	GetBoxesBoxIdQr(ctx echo.Context, boxId Id, params GetBoxesBoxIdQrParams) error
	// 特定のitem削除
	// (DELETE /items/{item_id})
	DeleteItemsItemId(ctx echo.Context, itemId Id) error
	// 特定のitem編集
	// (PUT /items/{item_id})
	PutItemsItemId(ctx echo.Context, itemId Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetBoxes(ctx echo.Context) error {
	var err error

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBoxes(ctx)
	return err
}

// PostBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) PostBoxes(ctx echo.Context) error {
	var err error

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBoxes(ctx)
	return err
}

// DeleteBoxesBoxId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBoxesBoxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "box_id" -------------
	var boxId Id

	err = runtime.BindStyledParameter("simple", false, "box_id", ctx.Param("box_id"), &boxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter box_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBoxesBoxId(ctx, boxId)
	return err
}

// PutBoxesBoxId converts echo context to params.
func (w *ServerInterfaceWrapper) PutBoxesBoxId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "box_id" -------------
	var boxId Id

	err = runtime.BindStyledParameter("simple", false, "box_id", ctx.Param("box_id"), &boxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter box_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutBoxesBoxId(ctx, boxId)
	return err
}

// GetBoxesBoxIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetBoxesBoxIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "box_id" -------------
	var boxId Id

	err = runtime.BindStyledParameter("simple", false, "box_id", ctx.Param("box_id"), &boxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter box_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBoxesBoxIdItems(ctx, boxId)
	return err
}

// PostBoxesBoxIdItems converts echo context to params.
func (w *ServerInterfaceWrapper) PostBoxesBoxIdItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "box_id" -------------
	var boxId Id

	err = runtime.BindStyledParameter("simple", false, "box_id", ctx.Param("box_id"), &boxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter box_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBoxesBoxIdItems(ctx, boxId)
	return err
}

// GetBoxesBoxIdQr converts echo context to params.
func (w *ServerInterfaceWrapper) GetBoxesBoxIdQr(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "box_id" -------------
	var boxId Id

	err = runtime.BindStyledParameter("simple", false, "box_id", ctx.Param("box_id"), &boxId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter box_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBoxesBoxIdQrParams
	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBoxesBoxIdQr(ctx, boxId, params)
	return err
}

// DeleteItemsItemId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItemsItemId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "item_id" -------------
	var itemId Id

	err = runtime.BindStyledParameter("simple", false, "item_id", ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteItemsItemId(ctx, itemId)
	return err
}

// PutItemsItemId converts echo context to params.
func (w *ServerInterfaceWrapper) PutItemsItemId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "item_id" -------------
	var itemId Id

	err = runtime.BindStyledParameter("simple", false, "item_id", ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutItemsItemId(ctx, itemId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/boxes", wrapper.GetBoxes)
	router.POST(baseURL+"/boxes", wrapper.PostBoxes)
	router.DELETE(baseURL+"/boxes/:box_id", wrapper.DeleteBoxesBoxId)
	router.PUT(baseURL+"/boxes/:box_id", wrapper.PutBoxesBoxId)
	router.GET(baseURL+"/boxes/:box_id/items", wrapper.GetBoxesBoxIdItems)
	router.POST(baseURL+"/boxes/:box_id/items", wrapper.PostBoxesBoxIdItems)
	router.GET(baseURL+"/boxes/:box_id/qr", wrapper.GetBoxesBoxIdQr)
	router.DELETE(baseURL+"/items/:item_id", wrapper.DeleteItemsItemId)
	router.PUT(baseURL+"/items/:item_id", wrapper.PutItemsItemId)

}

